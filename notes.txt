Stages
1: prediction
2: Snap
3: Space Patterns

4: actions
5: attention and wrong predictions
6: Time Patterns

top down search, rely on predictions, mute, STM>1, continuous (non binary, not layered) stimulation


TODO
mark neurons for creation and create em at night
make eyeneurons legit neurons that just can't be snapped
check what is "white" in build_input and what ui's "input" really means (and "what" is what?)
check the optimization of bundles (am almost sure it does not work)
snapping of pattern neurons might not work -> write unit tests!

color for pattern neurons and action neurons; maybe also write type in csv files
how to decide the max age of weights?
start everything as pattern?

!!!! what happens when neurons have fusioned too early?  !!!!

add action neurons into pool too? maybe rather after we introduce reward
(and 2 level actions: reflexes and chosen actions)


bundle weights minimization (take the smaller?bigger? of two sets if one is included in the other?)
dream
noise (continuous values?)



start with really 0 neurons;
sync of direct activations: how

to activate pattern neurons we might need too many pass of “doDirect activation” so we really need deysnc activation w/o special treatment for “direct weights”.

with attention we can avoid trying to predict each neuron...

We don’t actually need instantaneous weights — complete parallelism is more important than instant reaction times


when we have space, we can avoid too big search in snap statement.
also higher levels should get closer and closer to each other while sensory levels are separated: sensory out surface of brain, high level inside with trunk linking hemispheres??

snap: outweights globally the same, inweights individually not contradicting.
